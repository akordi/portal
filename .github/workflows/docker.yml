name: Docker

on:
  push:
    branches: ["main"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    strategy:
      matrix:
        node-version: [23.11.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: pnpm build
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: "v2.2.4"

        # Set up BuildKit Docker container builder to be able to build
        # multi-platform images and export cache
        # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

        # Login against a Docker registry except on PR
        # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # Extract metadata (tags, labels) for Docker
        # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

        # Build and push Docker image with Buildx (don't push on PR)
        # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

        # Sign the resulting Docker image digest except on PRs.
        # This will only write to the public Rekor transparency log when the Docker
        # repository is public to avoid leaking data.  If you would like to publish
        # transparency data even for private images, pass --force to cosign below.
        # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  deploy-test:
    runs-on: ubuntu-latest
    needs: build
    environment: test
    if: needs.build.result == 'success' && github.event_name != 'pull_request' && github.ref_type != 'tag'
    permissions:
      contents: read
    env:
      DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v2

      - name: Get repository name
        id: repo-name
        uses: MariachiBear/get-repo-name-action@v1.1.0

      - name: 'Portainer Deploy'
        uses: cssnr/portainer-stack-deploy-action@v1
        env:
          STACK_NAME: ${{github.repository_owner}}-${{ steps.repo-name.outputs.repository-name }}
        with:
          url: ${{ vars.TEST_PORTAINER_URL }}
          name: '${{ env.STACK_NAME }}'
          type: 'file'
          file: 'docker/stack.yml'
          token: ${{ secrets.TEST_PORTAINER_API_KEY }}
          merge_env: true
          env_json: |
            {
              "DOCKER_IMAGE": "${{ env.DOCKER_IMAGE }}"
            }

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    environment: prod
    if: needs.build.result == 'success' && github.event_name != 'pull_request' && github.ref_type == 'tag'
    permissions:
      contents: read
    env:
      DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Get repository name
        id: repo-name
        uses: MariachiBear/get-repo-name-action@v1.1.0

      - name: 'Portainer Deploy Prod'
        uses: cssnr/portainer-stack-deploy-action@v1
        env:
          STACK_NAME: ${{github.repository_owner}}-${{ steps.repo-name.outputs.repository-name }}
        if: github.ref_type == 'tag'
        with:
          url: ${{ vars.PROD_PORTAINER_URL }}
          name: '${{ env.STACK_NAME }}'
          type: 'file'
          file: 'docker/stack.yml'
          token: ${{ secrets.PROD_PORTAINER_API_KEY }}
          merge_env: true
          env_json: |
            {
              "DOCKER_IMAGE": "${{ env.DOCKER_IMAGE }}"
            }